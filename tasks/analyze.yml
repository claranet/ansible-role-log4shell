---
- name: analyze - Merge files list
  set_fact:
    _log4shell_files: "{{ _log4shell_find_files + _log4shell_lsof_files }}"

- block:
    - name: analyze - Analyze jar and war files
      unarchive:
        src: "{{ item }}"
        dest: /tmp  # Also needed in check mode ¯\_(ツ)_/¯
        remote_src: true
        list_files: true
      check_mode: true
      loop: "{{ _log4shell_files }}"
      register: _log4shell_analyze_unarchive
      tags:
        - molecule-idempotence-notest

    - name: analyze - Process analyze
      set_fact:
        log4shell_analyze_versions: "{{ log4shell_analyze_versions|default({}) | combine({item.item: ((item.files | map('regex_search', _log4shell_regex, '\\1') | select('iterable') | map('first') | list | first) if item.item.endswith('.war') else item.item | regex_search(_log4shell_regex, '\\1') | default([_log4shell_dummy_version], true) | first )}) }}"
      loop: "{{ _log4shell_analyze_unarchive.results|default([]) }}"
      loop_control:
        label: "{{ item.item }}"

    - block:
        - name: analyze - Check for CVE-2021-44228 (Log4Shell)
          assert:
            that:
              - item.value is version(_log4shell_patched_version, '>=') or item.value is version(_log4shell_dummy_version, '==')
            fail_msg: "{{ item.key }} is using Log4J version {{ item.value }} which may be **VULNERABLE** to CVE-2021-44228 (Log4Shell)"
            success_msg: "{{ item.key }} is using Log4J version {{ item.value }} which is **NOT** vulnerable to CVE-2021-44228 (Log4Shell)"
          loop: "{{ log4shell_analyze_versions | dict2items }}"
          register: _log4shell_assert

      rescue:
        - name: analyze - Fail if vulnerable to CVE-2021-44228 (Log4Shell)
          fail:
            msg: "At least one file may be **VULNERABLE** to CVE-2021-44228 (Log4Shell)"

      when:
        - log4shell_analyze_versions is defined
  when: _log4shell_files|length>0
...
